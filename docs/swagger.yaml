basePath: /
definitions:
  entity.Card:
    properties:
      answer:
        type: string
      created_at:
        type: string
      deck_id:
        type: string
      id:
        type: string
      last_review:
        type: string
      next_review:
        type: string
      num_reviews:
        type: integer
      question:
        type: string
      question_img_label:
        type: string
      question_img_url:
        type: string
      sm2_ef:
        type: number
      sm2_i:
        type: integer
      sm2_n:
        type: integer
      user_id:
        type: string
      wrong_answers:
        items:
          type: string
        type: array
    type: object
  entity.Deck:
    properties:
      created_at:
        type: string
      cur_new_cards:
        type: integer
      cur_review_cards:
        type: integer
      description:
        type: string
      description_img_url:
        type: string
      id:
        type: string
      is_favorite:
        type: boolean
      is_public:
        type: boolean
      last_review:
        type: string
      max_new_cards:
        type: integer
      max_review_cards:
        type: integer
      name:
        type: string
      rating:
        type: number
      total_cards:
        type: integer
      total_learned_cards:
        type: integer
      user_id:
        type: string
      views:
        type: integer
    type: object
  entity.DeckWithCards:
    properties:
      cards:
        items:
          $ref: '#/definitions/entity.Card'
        type: array
      created_at:
        type: string
      cur_new_cards:
        type: integer
      cur_review_cards:
        type: integer
      description:
        type: string
      description_img_url:
        type: string
      id:
        type: string
      is_favorite:
        type: boolean
      is_public:
        type: boolean
      last_review:
        type: string
      max_new_cards:
        type: integer
      max_review_cards:
        type: integer
      name:
        type: string
      rating:
        type: number
      total_cards:
        type: integer
      total_learned_cards:
        type: integer
      user_id:
        type: string
      views:
        type: integer
    type: object
  entity.DeckWithReviewCards:
    properties:
      cards:
        items:
          $ref: '#/definitions/entity.Card'
        type: array
      created_at:
        type: string
      cur_new_cards:
        type: integer
      cur_review_cards:
        type: integer
      description:
        type: string
      description_img_url:
        type: string
      id:
        type: string
      is_favorite:
        type: boolean
      is_public:
        type: boolean
      last_review:
        type: string
      max_new_cards:
        type: integer
      max_review_cards:
        type: integer
      name:
        type: string
      num_blue_cards:
        type: integer
      num_green_cards:
        type: integer
      num_red_cards:
        type: integer
      rating:
        type: number
      total_cards:
        type: integer
      total_learned_cards:
        type: integer
      user_id:
        type: string
      views:
        type: integer
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      hashed_password:
        type: string
      id:
        type: string
      is_admin:
        type: boolean
      last_streak:
        type: string
      level:
        type: integer
      name:
        type: string
      streak:
        type: integer
      xp:
        type: integer
      xp_to_level_up:
        type: integer
    type: object
  request.CopyCardToDeckRequest:
    properties:
      card_id:
        type: string
      deck_id:
        type: string
    required:
    - card_id
    - deck_id
    type: object
  request.CopyDeckRequest:
    properties:
      deck_id:
        type: string
    required:
    - deck_id
    type: object
  request.CreateCardRequest:
    properties:
      answer:
        type: string
      deck_id:
        type: string
      question:
        type: string
      question_img_label:
        type: string
      question_img_url:
        type: string
      wrong_answers:
        items:
          type: string
        type: array
    required:
    - answer
    - deck_id
    - question
    - wrong_answers
    type: object
  request.CreateDeckRequest:
    properties:
      description:
        type: string
      description_img_url:
        type: string
      name:
        type: string
      total_cards:
        type: integer
    required:
    - name
    type: object
  request.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  request.UpdateCardRequest:
    properties:
      answer:
        type: string
      card_id:
        type: string
      deck_id:
        type: string
      question:
        type: string
      question_img_label:
        type: string
      question_img_url:
        type: string
      wrong_answers:
        items:
          type: string
        type: array
    required:
    - card_id
    type: object
  request.UpdateDeckRequest:
    properties:
      cur_new_cards:
        type: integer
      cur_review_cards:
        type: integer
      deck_id:
        type: string
      description:
        type: string
      description_img_url:
        type: string
      is_favorite:
        type: boolean
      is_public:
        type: boolean
      last_review:
        type: string
      max_new_cards:
        type: integer
      max_review_cards:
        type: integer
      name:
        type: string
    required:
    - deck_id
    type: object
  request.UpdateReviewCardsRequest:
    properties:
      card_ids:
        items:
          type: string
        type: array
      deck_id:
        type: string
      is_correct:
        items:
          type: boolean
        type: array
      total_xp:
        type: integer
    required:
    - card_ids
    - deck_id
    - is_correct
    - total_xp
    type: object
  request.UpdateUserRequest:
    properties:
      hashed_password:
        type: string
      name:
        type: string
    type: object
  response.CopyCardToDeckResponse:
    properties:
      success:
        type: boolean
    type: object
  response.CopyDeckResponse:
    properties:
      success:
        type: boolean
    type: object
  response.CreateCardResponse:
    properties:
      success:
        type: boolean
    type: object
  response.CreateDeckResponse:
    properties:
      success:
        type: boolean
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  response.GetAllDataResponse:
    properties:
      decks_review:
        items:
          $ref: '#/definitions/entity.DeckWithReviewCards'
        type: array
      public_decks:
        items:
          $ref: '#/definitions/entity.DeckWithCards'
        type: array
      user:
        $ref: '#/definitions/entity.User'
      user_decks:
        items:
          $ref: '#/definitions/entity.DeckWithCards'
        type: array
    type: object
  response.LoginGetAllDataResponse:
    properties:
      access_token:
        type: string
      decks_review:
        items:
          $ref: '#/definitions/entity.DeckWithReviewCards'
        type: array
      public_decks:
        items:
          $ref: '#/definitions/entity.DeckWithCards'
        type: array
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_decks:
        items:
          $ref: '#/definitions/entity.DeckWithCards'
        type: array
    type: object
  response.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.SignupResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.UpdateCardResponse:
    properties:
      card:
        $ref: '#/definitions/entity.Card'
      success:
        type: boolean
    type: object
  response.UpdateDeckResponse:
    properties:
      deck:
        $ref: '#/definitions/entity.Deck'
      success:
        type: boolean
    type: object
  response.UpdateReviewCardsResponse:
    properties:
      cards:
        items:
          $ref: '#/definitions/entity.Card'
        type: array
      num_blue_cards:
        type: integer
      num_green_cards:
        type: integer
      num_red_cards:
        type: integer
      success:
        type: boolean
    type: object
  response.UpdateUserResponse:
    properties:
      success:
        type: boolean
      user:
        $ref: '#/definitions/entity.User'
    type: object
info:
  contact:
    email: hynduf@gmail.com
    name: API Support
  description: Backend server for VietCard application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: VietCard Backend API
  version: "1.0"
paths:
  /api/card/copy:
    post:
      consumes:
      - application/json
      description: Copy Card To Deck
      parameters:
      - description: Copy Card To Deck Request
        in: body
        name: copy_card_to_deck_request
        required: true
        schema:
          $ref: '#/definitions/request.CopyCardToDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CopyCardToDeckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Copy Card To Deck
      tags:
      - card
  /api/card/create:
    post:
      consumes:
      - application/json
      description: Create New Card
      parameters:
      - description: Create Card Request
        in: body
        name: create_card_request
        required: true
        schema:
          $ref: '#/definitions/request.CreateCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateCardResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create New Card
      tags:
      - card
  /api/card/review:
    put:
      consumes:
      - application/json
      description: Update Review Cards
      parameters:
      - description: Update Review Cards Request
        in: body
        name: update_review_cards_request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateReviewCardsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateReviewCardsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Review Cards
      tags:
      - card
  /api/card/update:
    put:
      consumes:
      - application/json
      description: Update Card Details
      parameters:
      - description: Update Card Request
        in: body
        name: update_card_request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateCardResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Card Details
      tags:
      - card
  /api/deck/copy:
    post:
      consumes:
      - application/json
      description: Copy Deck
      parameters:
      - description: Copy Deck Request
        in: body
        name: copy_deck_request
        required: true
        schema:
          $ref: '#/definitions/request.CopyDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CopyDeckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Copy Deck
      tags:
      - deck
  /api/deck/create:
    post:
      consumes:
      - application/json
      description: Create New Deck
      parameters:
      - description: Create Deck Request
        in: body
        name: create_deck_request
        required: true
        schema:
          $ref: '#/definitions/request.CreateDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateDeckResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create New Deck
      tags:
      - deck
  /api/deck/review-cards:
    get:
      description: Get Deck With Review Cards Of Logged In User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.DeckWithReviewCards'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Deck With Review Cards Of Logged In User
      tags:
      - deck
  /api/deck/update:
    put:
      consumes:
      - application/json
      description: Update Deck Details
      parameters:
      - description: Update Deck Request
        in: body
        name: update_deck_request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateDeckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Deck Details
      tags:
      - deck
  /api/get-all:
    get:
      consumes:
      - multipart/form-data
      description: Get All Data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAllDataResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get All Data
      tags:
      - mobile
  /api/login:
    post:
      consumes:
      - multipart/form-data
      description: Log In
      parameters:
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Log In
      tags:
      - user
  /api/login-get-all:
    post:
      consumes:
      - multipart/form-data
      description: Log In And Get All Data
      parameters:
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginGetAllDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Log In And Get All Data
      tags:
      - mobile
  /api/refresh:
    post:
      consumes:
      - application/json
      description: Refresh Token
      parameters:
      - description: Refresh Token Request
        in: body
        name: refresh_token_request
        required: true
        schema:
          $ref: '#/definitions/request.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RefreshTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh Token
      tags:
      - user
  /api/signup:
    post:
      consumes:
      - multipart/form-data
      description: Sign Up
      parameters:
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: name
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SignupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Sign Up
      tags:
      - user
  /api/user/update:
    put:
      consumes:
      - application/json
      description: Update User Details
      parameters:
      - description: Update User Request
        in: body
        name: update_user_request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update User Details
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
